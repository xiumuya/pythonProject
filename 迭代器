迭代器
一个对象要想使用 for 的方式迭代出容器内的所有数据，这就需要这个类实现「迭代器协议」。

也就是说，一个类如果实现了「迭代器协议」，就可以称之为「迭代器」。

什么是「迭代器协议」呢？

在 Python 中，实现迭代器协议就是实现以下 2 个方法：

__iter__：这个方法返回对象本身，即 self
__next__：这个方法每次返回迭代的值，在没有可迭代元素时，抛出 StopIteration 异常

生成器

在函数中使用 yield 关键字。其实，包含 yield 关键字的函数，不再是一个普通的函数，而返回的是一个生成器。
它在功能上与上面的例子一样，可以迭代生成器中的所有数据。

通常情况下，我们习惯在函数内使用 yield 的方式来创建一个生成器。

但是，使用生成器迭代数据相比于普通方式迭代数据，有什么优势呢？

这就要来看一下使用 yield 的函数和使用 return 的普通函数，有什么区别了。

使用 yield 的函数与使用 return 的函数，在执行时的差别在于：

包含 return 的方法会以 return 关键字为最终返回，每次执行都返回相同的结果
包含 yield 的方法一般用于迭代，每次执行时遇到 yield 就返回 yield 后的结果，
但内部会保留上次执行的状态，下次继续迭代时，会继续执行 yield 之后的代码，直到再次遇到 yield 后返回